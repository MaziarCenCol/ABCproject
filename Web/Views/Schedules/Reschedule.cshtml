@model MachineJobTask
@{
    ViewData["Title"] = "Reschedule Request";
}

<div class="container d-flex justify-content-center align-items-start min-vh-100 pt-2">
    <div class="card p-4 shadow-lg custom-box" style="width: 90%;">
        <h4 class="text-center mb-4">Rescheduling</h4>
        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="alert alert-info text-center">
                @ViewBag.Message
            </div>
        }

        <div class="container mt-4">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#down"
                        type="button" role="tab">Machine Down</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#delay" type="button"
                        role="tab">Material Delay</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="queue-tab" data-bs-toggle="tab" data-bs-target="#queue" type="button"
                        role="tab">All Changes</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="create-tab" data-bs-toggle="tab" data-bs-target="#create" type="button"
                        role="tab">Create Reschedule</button>
                </li>
            </ul>

            <div class="tab-content mt-3" id="myTabContent">

                <!-- Machine down -->
                <div class="tab-pane fade show active" id="down" role="tabpanel">
                    <form asp-action="Reschedule_down" asp-controller="Schedules" method="post">
                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label for="machine" class="me-2 fw-bold"> Machine/Resource: </label>
                                <select class="form-select" id="machine" name="Machine">
                                    <option value="">Select a Machine</option>
                                    @foreach (var item in Model.Machines)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Down date and time -->
                        <div class="row mb-3">
                            <label for="start_date" class="me-2 fw-bold">Down Start DateTime:</label>
                            <input type="datetime-local" class="form-control" id="start_date" name="Start_Date"
                                required>
                        </div>

                        <div class="row mb-3">
                            <label for="finish_date" class="me-2 fw-bold">Down Finish DateTime:</label>
                            <input type="datetime-local" class="form-control" id="finish_date" name="Finish_Date"
                                required>
                        </div>

                        <!-- Description -->
                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label for="description" class="me-4 fw-bold" style="width: 100px">Description:</label>
                                <input type="text" class="form-control" id="description" name="description"
                                    placeholder="Optional Reason ...">
                            </div>
                        </div>

                        <!-- Add to Queue Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Add to Changes</button>
                        </div>
                    </form>
                </div>

                <!-- Material delay -->
                <div class="tab-pane fade show" id="delay" role="tabpanel">
                    <form asp-action="Reschedule_delay" asp-controller="Schedules" method="post">
                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label for="job" class="me-2 fw-bold"> Job: </label>
                                <!-- Job dropdown -->
                                <select class="form-select" id="job" name="Job" required>
                                    <option value="">Select a Job</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label for="job" class="me-2 fw-bold"> Task: </label>
                                <!-- Task dropdown -->
                                <select class="form-select" id="task" name="Task" required>
                                    <option value="">Select a Task</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="materialReadyDatetime" class="me-2 fw-bold">Material Ready Datetime</label>
                            <input type="datetime-local" id="ready_datetime" name="ready_datetime" class="form-control"
                                required />
                        </div>

                        <!-- Description -->
                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label for="description" class="me-4 fw-bold" style="width: 100px">Description:</label>
                                <input type="text" class="form-control" id="description" name="description"
                                    placeholder="Optional description...">
                            </div>
                        </div>

                        <!-- Add to Queue Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Add to Changes</button>
                        </div>
                    </form>
                </div>


                <!-- Queue and Final Submit -->
                <div class="tab-pane fade" id="queue" role="tabpanel">
                    <form asp-action="SubmitReschedulingChanges" asp-controller="Schedules" method="post">
                        <input type="hidden" id="selectedMachineDownIds" name="selectedMachineDownIds" value="" />
                        <input type="hidden" id="selectedMaterialDelayIds" name="selectedMaterialDelayIds" value="" />

                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>Machine Downs</h5>
                                @if (ViewBag.MachineDowns != null && ViewBag.MachineDowns.Count > 0)
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered">
                                            <thead>
                                                <tr>
                                                    <th><input type="checkbox" id="selectAllMachineDowns" /></th>
                                                    <th>Machine</th>
                                                    <th>Start Time</th>
                                                    <th>End Time</th>
                                                    <th>Description</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < ViewBag.MachineDowns.Count; i++)
                                                {
                                                    var item = ViewBag.MachineDowns[i];
                                                    <tr>
                                                        <td><input type="checkbox" class="machine-down-check" data-index="@i"
                                                                checked /></td>
                                                        <td>@item.MachineName</td>
                                                        <td>@item.DownStartDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                                        <td>@item.DownEndDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                                        <td>@item.Description</td>
                                                        <td>
                                                            <form asp-action="RemoveMachineDown" asp-controller="Schedules"
                                                                method="post" style="display: inline;">
                                                                <input type="hidden" name="index" value="@i" />
                                                                <button type="submit"
                                                                    class="btn btn-sm btn-danger">Remove</button>
                                                            </form>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <p>No machine downs in queue.</p>
                                }
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>Material Delays</h5>
                                @if (ViewBag.MaterialDelays != null && ViewBag.MaterialDelays.Count > 0)
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered">
                                            <thead>
                                                <tr>
                                                    <th><input type="checkbox" id="selectAllMaterialDelays" /></th>
                                                    <th>Job</th>
                                                    <th>Task</th>
                                                    <th>Ready Time</th>
                                                    <th>Description</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < ViewBag.MaterialDelays.Count; i++)
                                                {
                                                    var item = ViewBag.MaterialDelays[i];
                                                    <tr>
                                                        <td><input type="checkbox" class="material-delay-check" data-index="@i"
                                                                checked /></td>
                                                        <td>@item.JobNo - @item.JobName</td>
                                                        <td>
                                                            @{
                                                                var taskDisplay = item.TaskSeq.ToString();
                                                                if (!string.IsNullOrEmpty(item.OperationCode))
                                                                {
                                                                    taskDisplay += " - " + item.OperationCode;
                                                                }
                                                                if (!string.IsNullOrEmpty(item.OperationDescription))
                                                                {
                                                                    taskDisplay += " - " + item.OperationDescription;
                                                                }
                                                            }
                                                            @taskDisplay
                                                        </td>
                                                        <td>@item.MaterialReadyDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                                        <td>@item.Description</td>
                                                        <td>
                                                            <form asp-action="RemoveMaterialDelay" asp-controller="Schedules"
                                                                method="post" style="display: inline;">
                                                                <input type="hidden" name="index" value="@i" />
                                                                <button type="submit"
                                                                    class="btn btn-sm btn-danger">Remove</button>
                                                            </form>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <p>No material delays in queue.</p>
                                }
                            </div>
                        </div>

                        <!-- Submit All Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-success" id="submitAll">Submit All Selected
                                Changes</button>
                        </div>
                    </form>
                </div>

                <!-- Create Reschedule -->
                <div class="tab-pane fade show" id="create" role="tabpanel">
                    <div class="row mb-3">
                        <label for="reschedule_start_date" class="me-2 fw-bold">Reschedule Start DateTime:</label>
                        <input type="datetime-local" class="form-control" id="reschedule_start_date"
                            name="reschedule_start_date" required>
                    </div>

                    <div class="d-grid">
                        <button type="button" id="create_reschedule_btn" class="btn btn-primary">Submit
                            Rescheduling</button>
                    </div>

                    <div id="reschedule_result" class="mt-3 alert" style="display: none;"></div>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle checkboxes
        document.addEventListener('DOMContentLoaded', function () {
            // Select all machine downs
            const selectAllMachineDowns = document.getElementById('selectAllMachineDowns');
            if (selectAllMachineDowns) {
                selectAllMachineDowns.addEventListener('change', function () {
                    const checkboxes = document.querySelectorAll('.machine-down-check');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                });
            }

            // Select all material delays
            const selectAllMaterialDelays = document.getElementById('selectAllMaterialDelays');
            if (selectAllMaterialDelays) {
                selectAllMaterialDelays.addEventListener('change', function () {
                    const checkboxes = document.querySelectorAll('.material-delay-check');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                });
            }

            // Submit form handling
            const form = document.querySelector('form[asp-action="SubmitReschedulingChanges"]');
            if (form) {
                form.addEventListener('submit', function (e) {
                    e.preventDefault(); // Prevent default form submission

                    // Collect selected machine downs
                    const selectedMachineDowns = [];
                    document.querySelectorAll('.machine-down-check:checked').forEach(cb => {
                        selectedMachineDowns.push(cb.getAttribute('data-index'));
                    });
                    document.getElementById('selectedMachineDownIds').value = selectedMachineDowns.join(',');

                    // Collect selected material delays
                    const selectedMaterialDelays = [];
                    document.querySelectorAll('.material-delay-check:checked').forEach(cb => {
                        selectedMaterialDelays.push(cb.getAttribute('data-index'));
                    });
                    document.getElementById('selectedMaterialDelayIds').value = selectedMaterialDelays.join(',');

                    console.log("Selected machine downs:", selectedMachineDowns);
                    console.log("Selected material delays:", selectedMaterialDelays);

                    // If we have either selections or all checkboxes are selected (default behavior)
                    if (selectedMachineDowns.length > 0 || selectedMaterialDelays.length > 0 ||
                        (document.querySelectorAll('.machine-down-check').length === 0 &&
                            document.querySelectorAll('.material-delay-check').length === 0)) {
                        // Submit the form manually
                        form.submit();
                    } else {
                        alert('Please select at least one item to submit.');
                    }
                });
            }

            // Auto-show the queue tab if there are items or a message
            if (@(((ViewBag.MachineDowns?.Count ?? 0) > 0 || (ViewBag.MaterialDelays?.Count ?? 0) > 0) ? "true" : "false") ||
                '@ViewBag.Message' !== '') {
                // Check if we should auto-switch to the queue tab
                if (@(((ViewBag.MachineDowns?.Count ?? 0) > 0 || (ViewBag.MaterialDelays?.Count ?? 0) > 0) ? "true" : "false")) {
                    const queueTab = document.getElementById('queue-tab');
                    if (queueTab) {
                        queueTab.click();
                    }
                }
            }

            // Create Reschedule button click handler
            const createRescheduleBtn = document.getElementById('create_reschedule_btn');
            if (createRescheduleBtn) {
                createRescheduleBtn.addEventListener('click', function () {
                    const startDateTime = document.getElementById('reschedule_start_date').value;
                    const resultDiv = document.getElementById('reschedule_result');

                    if (!startDateTime) {
                        resultDiv.className = 'mt-3 alert alert-danger';
                        resultDiv.textContent = 'Please select a start date and time';
                        resultDiv.style.display = 'block';
                        return;
                    }

                    // Show loading state
                    createRescheduleBtn.disabled = true;
                    createRescheduleBtn.textContent = 'Submitting...';
                    resultDiv.style.display = 'none';

                    // Make the API call to our controller instead
                    fetch('/Schedules/CreateReschedule', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            "rescheduleStartDate": startDateTime
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Reschedule response:", data); // Log the response data

                            if (data.success === true) {
                                resultDiv.className = 'mt-3 alert alert-success';
                                resultDiv.textContent = 'Rescheduling request submitted successfully!';

                                // Force redirect to display schedule with reschedule.html
                                console.log("Redirecting to display schedule...");
                                window.location.href = '/Schedules/DisplaySchedule?selectedFile=reschedule.html';
                            } else {
                                resultDiv.className = 'mt-3 alert alert-danger';
                                resultDiv.textContent = 'Rescheduling request failed. ' + (data.message || '');
                                // Reset button state but don't clear form
                                createRescheduleBtn.disabled = false;
                                createRescheduleBtn.textContent = 'Submit Rescheduling';
                                resultDiv.style.display = 'block';
                            }
                        })
                        .catch(error => {
                            resultDiv.className = 'mt-3 alert alert-danger';
                            resultDiv.textContent = 'Error: ' + error.message;
                            resultDiv.style.display = 'block';
                            // Reset button state but don't clear form
                            createRescheduleBtn.disabled = false;
                            createRescheduleBtn.textContent = 'Submit Rescheduling';
                        })
                        .finally(() => {
                            // We don't reset the button here as we're either redirecting or it's already reset in the error handlers
                        });
                });
            }
        });

        $(document).ready(function () {
            // Load and sort jobs
            loadJobs();

            // Existing job change handler
            $('#job').change(function () {
                var job_no = $(this).val();
                loadTasksForJob(job_no);
            });

            // Initial load - trigger tasks for pre-selected job (if any)
            var initialJobNo = $('#job').val();
            if (initialJobNo) {
                loadTasksForJob(initialJobNo);
            } else {
                // If no job is selected, we need to clear the task dropdown
                $('#task').empty().append('<option value="">Select a Task</option>');
            }

            // Function to load and sort jobs
            function loadJobs() {
                // Get jobs from the model
                var jobs = [];
                                                    @foreach (var job in Model.Jobs)
                    {
                        <text>
                            jobs.push({
                                jobNo: @job.JobNo,
                            name: "@Html.Raw(job.Name?.Replace("\"", "\\\""))"
                                                                                            });
                        </text>
                }

                    // Sort jobs by jobNo
                    jobs.sort(function (a, b) {
                        return a.jobNo - b.jobNo;
                    });

                // Populate the dropdown
                $('#job').empty().append('<option value="">Select a Job</option>');
                $.each(jobs, function (i, job) {
                    $('#job').append(
                        $('<option></option>')
                            .val(job.jobNo)
                            .text(job.jobNo + ' - ' + job.name)
                    );
                });
            }

            // Helper function to load tasks
            function loadTasksForJob(job_no) {
                console.log("Loading tasks for job:", job_no);

                $('#task').empty().append('<option value="">Select a Task</option>');

                if (job_no) {
                    $.getJSON('/Schedules/GetTasksByJob?jobNo=' + job_no, function (data) {
                        console.log("Tasks returned:", data);

                        // Sort the data by TaskSeq (numeric sort)
                        data.sort(function (a, b) {
                            return a.taskSeq - b.taskSeq;
                        });

                        $.each(data, function (i, task) {
                            var displayText = task.taskSeq;

                            if (task.operationCode) {
                                displayText += " - " + task.operationCode;
                            }

                            if (task.operationDescription) {
                                displayText += " - " + task.operationDescription;
                            }

                            $('#task').append(
                                $('<option></option>')
                                    .val(task.taskSeq)
                                    .text(displayText)
                            );
                        });
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        console.error("AJAX error:", textStatus, errorThrown);
                    });
                }
            }
        });
    </script>
}