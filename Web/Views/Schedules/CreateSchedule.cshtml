@{
	ViewData["Title"] = "Upload Files";
}

<div class="container d-flex justify-content-center align-items-start min-vh-100 pt-5">
	<div class="card p-5 shadow-lg w-40">
		<h4 class="text-center mb-4">Create Project Schedule</h4>
		<br />

		@if (!string.IsNullOrEmpty(ViewBag.Message))
		{
			<div class="alert alert-info text-center">
				@ViewBag.Message
			</div>
		}

		<form id="uploadForm" enctype="multipart/form-data">
			<div class="mb-5">
				@{
					// Get project list from ViewBag (passed from controller)
					List<SelectListItem> projectList = ViewBag.ProjectList ?? new List<SelectListItem>();
				}
				<!-- Dropdown for projects -->
				<label for="projectSelect">Select Projects:</label>
				<select id="projectSelect" name="projects" class="form-control" multiple size="10">
					@foreach (var item in projectList)
					{
						<option value="@item.Value">@item.Text</option>
					}
				</select>

				<br />

				<!-- Date picker -->
				<label for="startDate">Start Date:</label>
				<input type="date" id="startDate" name="startDate" class="form-control" />

				<br />

				<!-- Submit button -->
				<button type="button" onclick="createSchedule()" class="btn btn-primary mt-2">Create Schedule</button>
			</div>

			<div id="generatingStatus" class="mt-3 text-center text-info" style="display: none;">
				⏳ Schedule Generating... Please wait.
			</div>

			<div id="errorMessage" class="mt-3 alert alert-danger" style="display: none;"></div>
		</form>
	</div>
</div>

<script>
	function createSchedule(event) {
		if (event) event.preventDefault();

		const startDate = document.getElementById('startDate').value;
		const projectSelect = document.getElementById('projectSelect');
		const selectedProjects = Array.from(projectSelect.selectedOptions).map(opt => parseInt(opt.value, 10));
		const statusDiv = document.getElementById('generatingStatus');
		const errorDiv = document.getElementById('errorMessage');

		// Hide any previous error messages
		errorDiv.style.display = "none";

		const requestData = {
			start_date: startDate,
			projects: selectedProjects
		};

		// Show the loading message
		statusDiv.style.display = "block";
		statusDiv.textContent = "⏳ Schedule Generating... Please wait.";

		fetch('http://127.0.0.1:8000/api/create_schedule', {
			method: 'POST',
			headers: {
				'Accept': 'application/json',
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(requestData)
		})
			.then(async (response) => {
				const text = await response.text();

				if (!response.ok) {
					errorDiv.textContent = "🚫 Server error: " + text;
					errorDiv.style.display = "block";
					return;
				}

				try {
					const responseData = JSON.parse(text);
					console.log("✅ API Response:", responseData);

					if (responseData.success) {
						// If success is true, save the schedule data
						await saveJsonToServer(responseData.data);
					} else {
						// If success is false, show the error message
						errorDiv.textContent = "❌ Error: " + (responseData.error || "Unknown error occurred");
						errorDiv.style.display = "block";
					}

				} catch (err) {
					console.error("⚠️ Could not parse JSON:", text);
					errorDiv.textContent = "API responded, but JSON was invalid: " + text;
					errorDiv.style.display = "block";
				}
			})
			.catch(error => {
				console.error("❌ Network or server error:", error);
				errorDiv.textContent = "API request failed: " + error.message;
				errorDiv.style.display = "block";
			})
			.finally(() => {
				statusDiv.style.display = "none";
			});
	}

	async function saveJsonToServer(data) {
		const statusDiv = document.getElementById('generatingStatus');
		const errorDiv = document.getElementById('errorMessage');

		try {
			// 1) Save JSON data
			statusDiv.style.display = "block";
			statusDiv.textContent = "⏳ Saving JSON data…";
			let res = await fetch('/api/file/save_schedule_json', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(data)
			});

			if (!res.ok) {
				throw new Error("Failed to save JSON data");
			}

			// 2) Fetch the Gantt chart using the API
			statusDiv.textContent = "⏳ Generating Gantt chart…";
			res = await fetch('/Schedules/FetchInitialGanttChart', { method: 'POST' });

			if (!res.ok) {
				throw new Error("Failed to fetch Gantt chart");
			}

			const chartResult = await res.json();

			if (!chartResult.success) {
				throw new Error(chartResult.message || "Failed to create Gantt chart");
			}

			// 3) Redirect to the DisplaySchedule action with the file name
			window.location.href = `/Schedules/DisplaySchedule?selectedFile=${chartResult.fileName}`;
		} catch (error) {
			console.error("Error:", error);
			errorDiv.textContent = error.message;
			errorDiv.style.display = "block";
			statusDiv.style.display = "none";
		}
	}

</script>
