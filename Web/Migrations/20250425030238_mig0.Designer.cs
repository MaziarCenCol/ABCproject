// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250425030238_mig0")]
    partial class mig0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MachineMachineOpName", b =>
                {
                    b.Property<int>("MachineOpNamesId")
                        .HasColumnType("int");

                    b.Property<int>("MachinesId")
                        .HasColumnType("int");

                    b.HasKey("MachineOpNamesId", "MachinesId");

                    b.HasIndex("MachinesId");

                    b.ToTable("MachineMachineOpName");
                });

            modelBuilder.Entity("Web.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ActualProdHours")
                        .HasColumnType("float");

                    b.Property<double?>("CompletionPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobNo")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("RequiredProdHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Web.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CalibratedAccuracyMM")
                        .HasColumnType("float");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxAvailableHoursPerDay")
                        .HasColumnType("int");

                    b.Property<double?>("MaxFeedMMmin")
                        .HasColumnType("float");

                    b.Property<double?>("MaxOpen")
                        .HasColumnType("float");

                    b.Property<double?>("MaxOpenInches")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OperationCostHourly")
                        .HasColumnType("float");

                    b.Property<string>("Orientation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PlateLength")
                        .HasColumnType("float");

                    b.Property<double?>("PlateLengthInches")
                        .HasColumnType("float");

                    b.Property<double?>("PlateWidth")
                        .HasColumnType("float");

                    b.Property<double?>("PlateWidthInches")
                        .HasColumnType("float");

                    b.Property<double?>("RapidMMmin")
                        .HasColumnType("float");

                    b.Property<string>("ResourceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rpm")
                        .HasColumnType("float");

                    b.Property<double?>("TableCapacity")
                        .HasColumnType("float");

                    b.Property<int?>("ToolChangerCapacity")
                        .HasColumnType("int");

                    b.Property<string>("ToolHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Wtravel")
                        .HasColumnType("float");

                    b.Property<double?>("Xtravel")
                        .HasColumnType("float");

                    b.Property<double?>("XtravelInches")
                        .HasColumnType("float");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.Property<double?>("Ytravel")
                        .HasColumnType("float");

                    b.Property<double?>("YtravelInches")
                        .HasColumnType("float");

                    b.Property<double?>("ZtravelDaylight")
                        .HasColumnType("float");

                    b.Property<double?>("ZtravelDaylightInches")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Web.Models.MachineDownSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("VersionId");

                    b.ToTable("MachineDownSchedules");
                });

            modelBuilder.Entity("Web.Models.MachineOpName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MachineOpNames");
                });

            modelBuilder.Entity("Web.Models.MachineOperationPriority", b =>
                {
                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("OperationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("MachineId", "OperationCategoryId");

                    b.HasIndex("OperationCategoryId");

                    b.ToTable("MachineOperationPriority");
                });

            modelBuilder.Entity("Web.Models.MachineWeeklyUpTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("OperationStartTime")
                        .HasColumnType("time");

                    b.Property<int>("UpHour")
                        .HasColumnType("int");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineWeeklyUpTimes");
                });

            modelBuilder.Entity("Web.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Web.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MachineOpNameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineOpNameId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Web.Models.OperationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationCategory");
                });

            modelBuilder.Entity("Web.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Web.Models.ScheduleVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduleVersion");
                });

            modelBuilder.Entity("Web.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ActualProdHours")
                        .HasColumnType("float");

                    b.Property<double>("CompletionPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("RequiredProdHours")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskSeq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("OperationId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Web.Models.TaskMachine", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("OperationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "MachineId");

                    b.HasIndex("MachineId");

                    b.HasIndex("OperationCategoryId");

                    b.ToTable("TaskMachines");
                });

            modelBuilder.Entity("Web.Models.TaskSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleGenerationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubTask_Number")
                        .HasColumnType("int");

                    b.Property<int>("SubTasks_Total")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VersionId");

                    b.ToTable("TaskSchedules");
                });

            modelBuilder.Entity("Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MachineMachineOpName", b =>
                {
                    b.HasOne("Web.Models.MachineOpName", null)
                        .WithMany()
                        .HasForeignKey("MachineOpNamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Models.Job", b =>
                {
                    b.HasOne("Web.Models.Project", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Models.MachineDownSchedule", b =>
                {
                    b.HasOne("Web.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.ScheduleVersion", "ScheduleVersion")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("ScheduleVersion");
                });

            modelBuilder.Entity("Web.Models.MachineOperationPriority", b =>
                {
                    b.HasOne("Web.Models.Machine", "Machine")
                        .WithMany("MachineOperationPrioritys")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.OperationCategory", "OperationCategory")
                        .WithMany("MachineOperationPrioritys")
                        .HasForeignKey("OperationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("OperationCategory");
                });

            modelBuilder.Entity("Web.Models.MachineWeeklyUpTime", b =>
                {
                    b.HasOne("Web.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("Web.Models.Material", b =>
                {
                    b.HasOne("Web.Models.Task", null)
                        .WithMany("Materials")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Models.Operation", b =>
                {
                    b.HasOne("Web.Models.MachineOpName", "MachineOpName")
                        .WithMany("Operations")
                        .HasForeignKey("MachineOpNameId");

                    b.Navigation("MachineOpName");
                });

            modelBuilder.Entity("Web.Models.Task", b =>
                {
                    b.HasOne("Web.Models.Job", null)
                        .WithMany("Tasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Web.Models.TaskMachine", b =>
                {
                    b.HasOne("Web.Models.Machine", "Machine")
                        .WithMany("TaskMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.OperationCategory", "OperationCategory")
                        .WithMany()
                        .HasForeignKey("OperationCategoryId");

                    b.HasOne("Web.Models.Task", "Task")
                        .WithMany("TaskMachines")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("OperationCategory");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Web.Models.TaskSchedule", b =>
                {
                    b.HasOne("Web.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.ScheduleVersion", "ScheduleVersion")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("ScheduleVersion");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Web.Models.Job", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Web.Models.Machine", b =>
                {
                    b.Navigation("MachineOperationPrioritys");

                    b.Navigation("TaskMachines");
                });

            modelBuilder.Entity("Web.Models.MachineOpName", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Web.Models.OperationCategory", b =>
                {
                    b.Navigation("MachineOperationPrioritys");
                });

            modelBuilder.Entity("Web.Models.Project", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Web.Models.Task", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("TaskMachines");
                });
#pragma warning restore 612, 618
        }
    }
}
